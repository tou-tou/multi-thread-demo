<svg width="800" height="600" xmlns="http://www.w3.org/2000/svg">
  <!-- 背景 -->
  <rect width="800" height="600" fill="#f5f5f5"/>
  
  <!-- タイトル -->
  <text x="400" y="30" text-anchor="middle" font-size="20" font-weight="bold">Record() と GetCountsAndReset() の競合</text>
  
  <!-- コード表示エリア -->
  <g id="code-areas">
    <!-- Record メソッド -->
    <g transform="translate(50, 60)">
      <rect x="0" y="0" width="320" height="200" fill="#ffebee" stroke="#d32f2f" stroke-width="2"/>
      <text x="160" y="25" text-anchor="middle" font-size="14" font-weight="bold">Record("MethodC") - Thread A</text>
      
      <!-- コード -->
      <rect x="10" y="40" width="300" height="150" fill="white" stroke="#666" stroke-width="1"/>
      <text x="20" y="60" font-size="11" font-family="monospace">public void Record(string methodName)</text>
      <text x="20" y="75" font-size="11" font-family="monospace">{</text>
      <text x="20" y="95" font-size="11" font-family="monospace" fill="#d32f2f" font-weight="bold">    // ① 参照を取得</text>
      <text x="20" y="110" font-size="11" font-family="monospace">    var queue = this._events;</text>
      <text x="20" y="130" font-size="11" font-family="monospace" fill="#ff9800" font-weight="bold">    // ② ここで割り込み！</text>
      <text x="20" y="150" font-size="11" font-family="monospace" fill="#d32f2f" font-weight="bold">    // ③ 古いキューに追加</text>
      <text x="20" y="165" font-size="11" font-family="monospace">    queue.Enqueue(methodName);</text>
      <text x="20" y="180" font-size="11" font-family="monospace">}</text>
    </g>
    
    <!-- GetCountsAndReset メソッド -->
    <g transform="translate(430, 60)">
      <rect x="0" y="0" width="320" height="200" fill="#e8f5e9" stroke="#4caf50" stroke-width="2"/>
      <text x="160" y="25" text-anchor="middle" font-size="14" font-weight="bold">GetCountsAndReset() - Thread B</text>
      
      <!-- コード -->
      <rect x="10" y="40" width="300" height="150" fill="white" stroke="#666" stroke-width="1"/>
      <text x="20" y="60" font-size="11" font-family="monospace">public Dictionary GetCountsAndReset()</text>
      <text x="20" y="75" font-size="11" font-family="monospace">{</text>
      <text x="20" y="95" font-size="11" font-family="monospace" fill="#4caf50" font-weight="bold">    // ② アトミックに交換</text>
      <text x="20" y="110" font-size="11" font-family="monospace">    var oldQueue = Interlocked.Exchange(</text>
      <text x="20" y="125" font-size="11" font-family="monospace">        ref _events, new ConcurrentQueue());</text>
      <text x="20" y="145" font-size="11" font-family="monospace">    // 集計処理...</text>
      <text x="20" y="165" font-size="11" font-family="monospace">    return counts;</text>
      <text x="20" y="180" font-size="11" font-family="monospace">}</text>
    </g>
  </g>
  
  <!-- メモリ状態の変化 -->
  <g id="memory-states" transform="translate(50, 280)">
    <text x="350" y="0" text-anchor="middle" font-size="16" font-weight="bold">メモリ状態の変化</text>
    
    <!-- 初期状態 -->
    <g transform="translate(0, 20)">
      <rect x="0" y="0" width="150" height="80" fill="#e3f2fd" stroke="#1976d2" stroke-width="1"/>
      <text x="75" y="20" text-anchor="middle" font-size="12" font-weight="bold">初期状態</text>
      <rect x="10" y="30" width="130" height="20" fill="#ffeb3b" stroke="#f57f17" stroke-width="1"/>
      <text x="75" y="45" text-anchor="middle" font-size="10">_events → Queue1</text>
      <rect x="10" y="55" width="130" height="20" fill="#fff3e0" stroke="#ff9800" stroke-width="1"/>
      <text x="75" y="70" text-anchor="middle" font-size="10">Queue1: [A, B]</text>
    </g>
    
    <!-- Thread A: 参照取得後 -->
    <g transform="translate(180, 20)">
      <rect x="0" y="0" width="150" height="100" fill="#ffcdd2" stroke="#d32f2f" stroke-width="1"/>
      <text x="75" y="20" text-anchor="middle" font-size="12" font-weight="bold">① 参照取得</text>
      <rect x="10" y="30" width="130" height="20" fill="#ffeb3b" stroke="#f57f17" stroke-width="1"/>
      <text x="75" y="45" text-anchor="middle" font-size="10">_events → Queue1</text>
      <rect x="10" y="55" width="130" height="20" fill="#ffebee" stroke="#d32f2f" stroke-width="1"/>
      <text x="75" y="70" text-anchor="middle" font-size="10">queue = Queue1</text>
      <rect x="10" y="80" width="130" height="15" fill="#fff3e0" stroke="#ff9800" stroke-width="1"/>
      <text x="75" y="92" text-anchor="middle" font-size="9">Queue1: [A, B]</text>
    </g>
    
    <!-- Thread B: Exchange後 -->
    <g transform="translate(360, 20)">
      <rect x="0" y="0" width="150" height="120" fill="#e8f5e9" stroke="#4caf50" stroke-width="1"/>
      <text x="75" y="20" text-anchor="middle" font-size="12" font-weight="bold">② Exchange実行</text>
      <rect x="10" y="30" width="130" height="20" fill="#ffeb3b" stroke="#f57f17" stroke-width="1"/>
      <text x="75" y="45" text-anchor="middle" font-size="10">_events → Queue2</text>
      <rect x="10" y="55" width="130" height="20" fill="#ffebee" stroke="#d32f2f" stroke-width="1"/>
      <text x="75" y="70" text-anchor="middle" font-size="10">queue = Queue1</text>
      <rect x="10" y="80" width="130" height="15" fill="#fff3e0" stroke="#ff9800" stroke-width="1"/>
      <text x="75" y="92" text-anchor="middle" font-size="9">Queue1: [A, B]</text>
      <rect x="10" y="100" width="130" height="15" fill="#c8e6c9" stroke="#4caf50" stroke-width="1"/>
      <text x="75" y="112" text-anchor="middle" font-size="9">Queue2: []</text>
    </g>
    
    <!-- Thread A: Enqueue後 -->
    <g transform="translate(540, 20)">
      <rect x="0" y="0" width="150" height="120" fill="#ffcdd2" stroke="#d32f2f" stroke-width="2"/>
      <text x="75" y="20" text-anchor="middle" font-size="12" font-weight="bold">③ Enqueue実行</text>
      <rect x="10" y="30" width="130" height="20" fill="#ffeb3b" stroke="#f57f17" stroke-width="1"/>
      <text x="75" y="45" text-anchor="middle" font-size="10">_events → Queue2</text>
      <rect x="10" y="55" width="130" height="20" fill="#ffebee" stroke="#d32f2f" stroke-width="1"/>
      <text x="75" y="70" text-anchor="middle" font-size="10">queue = Queue1</text>
      <rect x="10" y="80" width="130" height="15" fill="#fff3e0" stroke="#ff9800" stroke-width="2"/>
      <text x="75" y="92" text-anchor="middle" font-size="9" font-weight="bold">Queue1: [A, B, C]</text>
      <rect x="10" y="100" width="130" height="15" fill="#c8e6c9" stroke="#4caf50" stroke-width="1"/>
      <text x="75" y="112" text-anchor="middle" font-size="9">Queue2: []</text>
    </g>
  </g>
  
  <!-- 最終結果 -->
  <rect x="100" y="450" width="600" height="110" fill="#ffcdd2" stroke="#d32f2f" stroke-width="3"/>
  <text x="400" y="480" text-anchor="middle" font-size="16" font-weight="bold">結果</text>
  <text x="400" y="505" text-anchor="middle" font-size="12">GetCountsAndReset() は Queue1 を集計後に破棄</text>
  <text x="400" y="525" text-anchor="middle" font-size="12" font-weight="bold">"MethodC" は集計に含まれずデータロスト！</text>
  <text x="400" y="545" text-anchor="middle" font-size="12">Interlocked.ExchangeはGetCountsAndResetの内部的な一貫性は保証するが、、Recordメソッドとの競合は防げない</text>
  
  <!-- 矢印 -->
  <defs>
    <marker id="arrow" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#666"/>
    </marker>
  </defs>
  
  <path d="M 180 320 L 230 320" stroke="#666" stroke-width="2" marker-end="url(#arrow)" fill="none"/>
  <path d="M 360 320 L 410 320" stroke="#666" stroke-width="2" marker-end="url(#arrow)" fill="none"/>
  <path d="M 540 320 L 590 320" stroke="#666" stroke-width="2" marker-end="url(#arrow)" fill="none"/>
</svg>